{"version":3,"sources":["components/Header.js","components/Footer.js","components/Loading.js","App.js","serviceWorker.js","index.js","models/index.js","stores/user.js","stores/history.js","stores/image.js","stores/auth.js","stores/index.js","logo.svg"],"names":["StyleWrapper","styled","header","Logo","img","StyledLink","NavLink","Login","div","StyledButton","Button","Component","observer","useStores","UserStore","AuthStore","history","useHistory","src","LogoURL","to","activeClassName","exact","currentUser","attributes","username","type","onClick","logout","console","log","push","Footer","footer","Loading","Home","lazy","History","About","Register","App","Header","fallback","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","AV","init","appId","appKey","serverURL","Auth","password","user","User","setUsername","setPassword","Promise","resolve","reject","signUp","loginedUser","logIn","logOut","current","Uploader","file","filename","item","Object","avFile","File","set","save","serverfile","page","query","limit","Query","include","skip","descending","equalTo","find","results","this","observable","action","newList","list","concat","isLoading","append","length","hasMore","finally","newFilename","newFile","isUploading","serverFile","isLogin","values","pullUser","err","resetUser","ImageStore","reset","HistoryStore","context","createContext","stores","useContext","module","exports"],"mappings":"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","file":"static/js/main.ebd047ed.chunk.js","sourcesContent":["import React,{useState} from 'react'\nimport LogoURL from '../logo.svg'\nimport { NavLink,useHistory} from 'react-router-dom'\nimport styled from 'styled-components'\nimport {Button} from 'antd';\nimport {useStores} from '../stores';\nimport {observer} from 'mobx-react';\n\n\nconst StyleWrapper = styled.header`\n   padding: 10px 100px;\n   background-color: #02101f;\n   display: flex;\n   align-items: center;\n   color: #fff;\n`\n\nconst Logo = styled.img`\n   height: 30px;\n`\n\nconst StyledLink = styled(NavLink)`\n   color: #fff;\n   margin-left: 30px;\n   &.active{\n      border-bottom: 1px solid #fff;\n   }\n`\n\nconst Login = styled.div`\n   margin-left: auto;\n   \n`\n\nconst StyledButton = styled(Button)`\n   margin-left: 10px;\n`\n\n\nconst Component = observer(() => {\n  const {UserStore,AuthStore} = useStores();\n  const history = useHistory();\n  const handleLogout = ()=>{\n    AuthStore.logout();\n\n  }\n\n  const handleLogin = ()=>{\n    console.log('跳转到登录页面')\n    history.push('/login');\n  }\n\n  const handleRegister = ()=>{\n    console.log('跳转到注册页面');\n    history.push('/register');\n  }\n\n  return (\n    <StyleWrapper>\n      <Logo src={LogoURL}/>\n      <nav>\n        <StyledLink to='/' activeClassName=\"active\" exact>首页</StyledLink>\n        <StyledLink to='/history'>上传历史</StyledLink>\n        <StyledLink to='/about'>关于我</StyledLink>\n      </nav>\n      <Login>\n        {\n          UserStore.currentUser ? <>\n              {UserStore.currentUser.attributes.username}<StyledButton type=\"primary\" onClick={handleLogout}>注销</StyledButton>\n          </> :\n            <>\n              <StyledButton type=\"primary\" onClick={handleLogin}>登录</StyledButton>\n              <StyledButton type=\"primary\" onClick={handleRegister}>注册</StyledButton>\n            </>\n        }\n      </Login>\n    </StyleWrapper>\n  )\n});\n\nexport default Component","import React from 'react';\nimport styled from 'styled-components';\n\n\nconst Footer = styled.footer`\n   display: flex;\n   align-items: center;\n   justify-content: center;\n   padding: 10px 100px;\n   font-size: 12px;\n   color: #aaa;\n   text-align: center;\n`;\n\n\nfunction Component() {\n  return (\n    <Footer>\n      <h1>Footer</h1>\n    </Footer>\n  )\n}\n\nexport default Component;","import React from 'react';\n\nfunction Loading(){\n  return (\n    <div>\n      loading...\n    </div>\n  );\n};\n\nexport default Loading;","import React, {Suspense, lazy} from 'react'\nimport './App.css'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Loading from './components/Loading'\nimport {\n  Switch,\n  Route\n} from 'react-router-dom'\n\n// import Home from './pages/Home';\n// import History from './pages/History';\n// import About from './pages/About';\n\nconst Home = lazy(() => import('./pages/Home'))\nconst History = lazy(() => import('./pages/History'))\nconst About = lazy(() => import('./pages/About'))\nconst Login = lazy(() => import('./pages/Login'))\nconst Register = lazy(() => import('./pages/Register'))\n\n\nfunction App() {\n  return (\n    <>\n      <Header/>\n      <main>\n        <Suspense fallback={<Loading/>}>\n          <Switch>\n            <Route path=\"/\" exact component={Home}/>\n            <Route path=\"/history\" component={History}/>\n            <Route path=\"/about\" component={About}/>\n            <Route path=\"/login\" component={Login}/>\n            <Route path=\"/register\" component={Register}/>\n          </Switch>\n        </Suspense>\n      </main>\n      <Footer/>\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\nimport {\n  HashRouter as Router\n} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App/>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n","import AV,{Query,User} from 'leancloud-storage';\n\nAV.init({\n  appId: \"GcuH5TCjAAtL3WKCY7ttthvq-gzGzoHsz\",\n  appKey: \"jL0Rcwb7UckDoKCKTL8fhvJI\",\n  serverURL: \"https://gcuh5tcj.lc-cn-n1-shared.com\"\n});\n\nconsole.log('start...');\n\nconst Auth = {\n  register(username,password){\n    let user = new User();\n    user.setUsername(username);\n    user.setPassword(password);\n    return new Promise((resolve,reject) =>\n    {\n      user.signUp().then(loginedUser => resolve(loginedUser),error=> reject(error))\n    });\n  },\n  login(username,password)\n  {\n    return new Promise((resolve,reject)=>{\n      AV.User.logIn(username,password).then(loginedUser=>resolve(loginedUser),error=>reject(error));\n    })\n  },\n\n  logout(){\n    User.logOut();\n  },\n\n  getCurrentUser()\n  {\n    return User.current();\n  }\n};\n\nconst Uploader =\n  {\n  add(file,filename,){\n    const item = new AV.Object('Image');\n    const avFile = new AV.File(filename,file);\n    item.set('filename',filename);\n    item.set('owner',AV.User.current());\n    item.set('url',avFile);\n    return new Promise((resolve,reject)=>{\n      item.save().then((serverfile)=>{\n        resolve(serverfile)\n      },(error)=>{\n        reject(error);\n      })\n    })\n  },\n  find({page=0,limit=10})\n  {\n    const query = new AV.Query('Image');\n    query.include('owner');\n    query.limit(10);\n    query.skip(page*10);\n    query.descending('createdAt');\n    query.equalTo('owner',AV.User.current());\n    return new Promise((resolve,reject)=>{\n      query.find().then(results =>{\n        resolve(results);\n      }).catch(error=>{\n        reject(error);\n      })\n    })\n  }\n}\n//window.Uploader = Uploader;\n\nexport {Auth,Uploader};","import {observable,action} from 'mobx';\nimport {Auth} from '../models';\n\nclass UserStore\n{\n  @observable currentUser = null;\n\n  @action pullUser()\n  {\n    this.currentUser = Auth.getCurrentUser();\n  }\n\n  @action resetUser()\n  {\n    this.currentUser = null;\n  }\n\n}\n\nexport default new UserStore();","import {observable,action} from 'mobx';\nimport {Uploader} from '../models';\nimport {message} from 'antd';\n\n\n\nclass HistoryStore\n{\n  @observable list = [];\n  @observable isLoading = false;\n  @observable hasMore = true;\n  @observable page = 0;\n  limit = 10;\n\n  @action append(newList)\n  {\n    this.list=this.list.concat(newList);\n  }\n\n  @action find()\n  {\n    this.isLoading = true;\n    Uploader.find({page:this.page,limit:this.limit})\n      .then(newList => {\n        this.append(newList);\n        if (newList.length<this.limit)\n        {\n          this.hasMore = false;\n        }\n      })\n      .catch(error=> message.error('加载图片失败'))\n      .finally(()=>this.isLoading=false)\n  }\n\n  @action reset(){\n    this.list = [];\n    this.isLoading = false;\n    this.hasMore = true;\n    this.page=0;\n  }\n}\n\nexport default new HistoryStore();","import {observable,action} from 'mobx';\nimport {Uploader} from '../models';\nimport {message} from 'antd';\n\nclass ImageStore\n{\n  @observable filename = \"\";\n  @observable file = null;\n  @observable isUploading = false;\n  @observable serverFile = null;\n\n\n\n  @action setFilename(newFilename)\n  {\n    this.filename = newFilename;\n  }\n\n  @action setFile(newFile)\n  {\n    this.file = newFile;\n  }\n\n  @action upload()\n  {\n    this.isUploading = true;\n    this.serverFile = null;\n    return new Promise((resolve,reject)=>{\n      Uploader.add(this.file,this.filename).then(serverfile=>{\n        this.serverFile = serverfile;\n        resolve(serverfile);\n      },\n        error=> {\n        message.error('上传失败');\n        reject(error);\n      }).finally(\n        ()=>this.isUploading=false\n      )})\n  }\n\n  @action reset(){\n    this.isUploading = false;\n    this.serverFile = null;\n  }\n}\n\nexport default new ImageStore();","import {observable,action} from 'mobx';\nimport {Auth} from '../models';\nimport UserStore from './user';\nimport {message} from 'antd';\nimport HistoryStore from './history';\nimport ImageStore from './image';\n\nclass AuthStore\n{\n  @observable values = {\n    username:'',\n    password:''\n  };\n\n  @action setIsLogin(isLogin){\n    this.isLogin = isLogin;\n  }\n\n  @action setUsername(username)\n  {\n    this.values.username = username;\n  }\n\n  @action setPassword(password)\n  {\n    this.values.password = password;\n  }\n\n  @action login(){\n    return new Promise((resolve,reject)=>{\n      Auth.login(this.values.username,this.values.password).then(\n        user => {\n          UserStore.pullUser();\n          resolve(user);\n        }).catch(err=>\n      {\n        UserStore.resetUser();\n        message.error('登录失败')\n        reject(err);\n      })\n    })\n  }\n\n  @action register()\n  {\n    return new Promise((resolve,reject)=>{\n      Auth.register(this.values.username,this.values.password).then(\n        user => {\n          UserStore.pullUser();\n          resolve(user);\n        }).catch(err=>\n      {\n        UserStore.resetUser();\n        message.error('注册失败');\n        reject(err);\n      })\n    })\n  }\n\n  @action logout(){\n    Auth.logout();\n    UserStore.resetUser();\n    ImageStore.reset();\n    HistoryStore.reset();\n  }\n}\n\nexport default new AuthStore();","import React,{createContext,useContext} from 'react';\nimport AuthStore from './auth';\nimport UserStore from './user';\nimport ImageStore from './image';\nimport HistoryStore from './history'\n\nconst context = createContext(\n    {\n        AuthStore,\n        UserStore,\n        ImageStore,\n        HistoryStore\n    });\n\nwindow.stores = {\n  AuthStore,\n  UserStore,\n  ImageStore,\n  HistoryStore\n}\n\nexport const useStores = () => useContext(context);\n\n\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}